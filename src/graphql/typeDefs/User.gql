input CreateUserInput {
  username: String!
  email: String!
  password: String!
  active: Boolean
  privilege: UserPrivileges
  state: UserStates
  friends: [String]
}
input UpdateUserInput {
  username: String
  email: String
  password: String
  active: Boolean
  privilege: UserPrivileges
  state: UserStates
  friends: [String]
}
input LoginInput {
  email: String!
  password: String!
}
enum UserPrivileges {
  user
  admin
}
enum UserStates {
  connected
  disconnected
}
type User {
  _id: ID!
  username: String!
  email: String!
  password: String!
  active: Boolean!
  privilege: UserPrivileges!
  state: UserStates!
  friends: [User]!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type AuthPayLoad {
  token: String!
}
type Query {
  getUsers: [User]!
}
type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(_id: String!, input: UpdateUserInput!): User!
  addFriend(_id: String!, friendId: String!): Boolean!
  addFriends(_id: String!, friendsIdArray: [String!]!): Boolean!
  login(input: LoginInput!): AuthPayLoad!
}
