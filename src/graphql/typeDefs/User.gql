enum UserStates {
  connected
  disconnect
}
input CreateUserInput {
  username: String!
  email: String!
  password: String!
  active: Boolean
  state: UserStates
}
input LoginInput {
  email: String!
  password: String!
}
input UpdateUserInput {
  username: String
  email: String
  password: String
  active: Boolean
  state: UserStates
}
type AuthPayLoad {
  token: String!
}
type User {
  _id: ID!
  username: String!
  email: String!
  password: String!
  active: Boolean!
  state: UserStates!
  updatedAt: DateTime!
  createdAt: DateTime!
  participations: [Participation]!
}
type Query {
  getUsers: [User]!
}
type Mutation {
  login(input: LoginInput!): AuthPayLoad!
  setUserState(userId: ID!, state: UserStates!): Boolean!
  createUser(input: CreateUserInput!): User!
  updateUser(userId: ID!, input: UpdateUserInput!): User!
  deleteUser(userId: ID!): Boolean!
}
type Subscription {
  subscribeUser(userId: ID!): User!
}
